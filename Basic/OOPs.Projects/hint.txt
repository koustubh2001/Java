 import java.util.*;

class Book {
    private String title;
    private String author;
    private String isbn;
    private boolean available;

    public Book(String title, String author, String isbn) {
        this.title = title;
        this.author = author;
        this.isbn = isbn;
        this.available = true; // Book is available by default
    }

    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }

    public String getIsbn() {
        return isbn;
    }

    public boolean isAvailable() {
        return available;
    }

    public void setAvailable(boolean available) {
        this.available = available;
    }

    @Override
    public String toString() {
        return "Title: " + title + ", Author: " + author + ", ISBN: " + isbn + ", Available: " + available;
    }
}

class Member {
    private String name;
    private String memberId;
    private Map<String, Date> borrowedBooks; // ISBN to due date

    public Member(String name, String memberId) {
        this.name = name;
        this.memberId = memberId;
        this.borrowedBooks = new HashMap<>();
    }

    public String getName() {
        return name;
    }

    public String getMemberId() {
        return memberId;
    }

    public Map<String, Date> getBorrowedBooks() {
        return borrowedBooks;
    }

    public void borrowBook(Book book, Library library) {
        if (borrowedBooks.size() < 5) {  // Limit to 5 books
            if (book.isAvailable()) {
                Calendar calendar = Calendar.getInstance();
                calendar.add(Calendar.DAY_OF_YEAR, 15); // Book due in 15 days
                Date dueDate = calendar.getTime();
                borrowedBooks.put(book.getIsbn(), dueDate);
                book.setAvailable(false);
                library.updateBookStatus(book);
                System.out.println(name + " borrowed " + book.getTitle() + ", due date: " + dueDate);
            } else {
                System.out.println("Sorry, " + book.getTitle() + " is currently unavailable.");
            }
        } else {
            System.out.println(name + " has already borrowed the maximum of 5 books.");
        }
    }

    public void returnBook(Book book, Library library) {
        if (borrowedBooks.containsKey(book.getIsbn())) {
            borrowedBooks.remove(book.getIsbn());
            book.setAvailable(true);
            library.updateBookStatus(book);
            System.out.println(name + " returned " + book.getTitle() + ".");
        } else {
            System.out.println(name + " has not borrowed " + book.getTitle() + ".");
        }
    }

    public void getBorrowingHistory() {
        System.out.println(name + "'s Borrowing History:");
        for (Map.Entry<String, Date> entry : borrowedBooks.entrySet()) {
            System.out.println("Book ISBN: " + entry.getKey() + ", Due Date: " + entry.getValue());
        }
    }
}

class Library {
    private List<Book> books;
    private List<Member> members;

    public Library() {
        this.books = new ArrayList<>();
        this.members = new ArrayList<>();
    }

    public void addBook(Book book) {
        books.add(book);
        System.out.println("Book '" + book.getTitle() + "' added to the library.");
    }

    public void removeBook(String isbn) {
        Book bookToRemove = null;
        for (Book book : books) {
            if (book.getIsbn().equals(isbn)) {
                bookToRemove = book;
                break;
            }
        }
        if (bookToRemove != null) {
            books.remove(bookToRemove);
            System.out.println("Book '" + bookToRemove.getTitle() + "' removed from the library.");
        } else {
            System.out.println("Book not found in the library.");
        }
    }

    public List<Book> searchBook(String title, String author, String isbn) {
        List<Book> foundBooks = new ArrayList<>();
        for (Book book : books) {
            if ((title != null && book.getTitle().toLowerCase().contains(title.toLowerCase())) ||
                (author != null && book.getAuthor().toLowerCase().contains(author.toLowerCase())) ||
                (isbn != null && book.getIsbn().equals(isbn))) {
                foundBooks.add(book);
            }
        }
        return foundBooks;
    }

    public void updateBookStatus(Book book) {
        System.out.println("Updated availability for '" + book.getTitle() + "'.");
    }

    public void registerMember(Member member) {
        members.add(member);
        System.out.println("Member '" + member.getName() + "' registered with ID: " + member.getMemberId());
    }

    public void checkDueDates() {
        Calendar calendar = Calendar.getInstance();
        Date currentDate = calendar.getTime();
        for (Member member : members) {
            for (Map.Entry<String, Date> entry : member.getBorrowedBooks().entrySet()) {
                if (entry.getValue().before(currentDate)) {
                    System.out.println("Warning: " + member.getName() + " has a late return for book ISBN " + entry.getKey() +
                            ". Due date: " + entry.getValue());
                }
            }
        }
    }
}

public class LibraryManagementSystem {
    public static void main(String[] args) {
        // Create Library
        Library library = new Library();

        // Add Books to Library
        Book book1 = new Book("1984", "George Orwell", "1234567890");
        Book book2 = new Book("To Kill a Mockingbird", "Harper Lee", "0987654321");
        library.addBook(book1);
        library.addBook(book2);

        // Register Members
        Member member1 = new Member("Alice", "M001");
        Member member2 = new Member("Bob", "M002");
        library.registerMember(member1);
        library.registerMember(member2);

        // Borrow Books
        member1.borrowBook(book1, library); // Alice borrows "1984"
        member1.borrowBook(book2, library); // Alice borrows "To Kill a Mockingbird"

        // Get Borrowing History
        member1.getBorrowingHistory();

        // Return Books
        member1.returnBook(book1, library);

        // Search Books
        List<Book> foundBooks = library.searchBook("1984", null, null);
        System.out.println("Search results:");
        for (Book book : foundBooks) {
            System.out.println(book);
        }

        // Check Overdue Books
        library.checkDueDates();
    }
}










/////////////////////////////////////////////////////////////////////////////








import java.util.ArrayList;
import java.util.List;

class Book {
    private String title;
    private String author;
    private String isbn;
    private boolean isIssued;

    public Book(String title, String author, String isbn) {
        this.title = title;
        this.author = author;
        this.isbn = isbn;
        this.isIssued = false;
    }

    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }

    public String getIsbn() {
        return isbn;
    }

    public boolean isIssued() {
        return isIssued;
    }

    public void issueBook() {
        if (!isIssued) {
            isIssued = true;
            System.out.println("Book issued successfully.");
        } else {
            System.out.println("Book is already issued.");
        }
    }

    public void returnBook() {
        if (isIssued) {
            isIssued = false;
            System.out.println("Book returned successfully.");
        } else {
            System.out.println("Book was not issued.");
        }
    }
}

class Library {
    private List<Book> books;

    public Library() {
        books = new ArrayList<>();
    }

    public void addBook(Book book) {
        books.add(book);
        System.out.println("Book added successfully.");
    }

    public void removeBook(String isbn) {
        for (Book book : books) {
            if (book.getIsbn().equals(isbn)) {
                books.remove(book);
                System.out.println("Book removed successfully.");
                return;
            }
        }
        System.out.println("Book not found.");
    }

    public void displayBooks() {
        if (books.isEmpty()) {
            System.out.println("No books available in the library.");
        } else {
            for (Book book : books) {
                System.out.println("Title: " + book.getTitle() + ", Author: " + book.getAuthor() + ", ISBN: " + book.getIsbn() + ", Issued: " + book.isIssued());
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Library library = new Library();

        Book book1 = new Book("The Great Gatsby", "F. Scott Fitzgerald", "1234567890");
        Book book2 = new Book("1984", "George Orwell", "0987654321");

        library.addBook(book1);
        library.addBook(book2);

        library.displayBooks();

        book1.issueBook();
        library.displayBooks();

        book1.returnBook();
        library.displayBooks();

        library.removeBook("1234567890");
        library.displayBooks();
    }
}